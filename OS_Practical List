1)Write a C program to implement First Come First Serve Scheduling Algorithm. (Consider all processes are arrived at time 0). 
  Inputs: Number of processes, Burst Time of each process. 
  Outputs: Turnaround time and waiting time of each process.  
⁃ #include<stdio.h>
⁃	main()
⁃	{
⁃	int n,a[10],b[10],t[10],w[10],g[10],i,m;
⁃	float att=0,awt=0;
⁃	            for(i=0;i<10;i++)
⁃	            {
⁃	                        a[i]=0; b[i]=0; w[i]=0; g[i]=0;
⁃	            }
⁃	printf("enter the number of process");
⁃	            scanf("%d",&n);
⁃	printf("enter the burst times");
⁃	            for(i=0;i<n;i++)
⁃	                scanf("%d",&b[i]);
⁃	    printf("\nenter the arrival times");
⁃	            for(i=0;i<n;i++)
⁃	                scanf("%d",&a[i]);
⁃	    g[0]=0;
⁃	             for(i=0;i<10;i++)
⁃	                   g[i+1]=g[i]+b[i];
⁃	             for(i=0;i<n;i++)
⁃	            {     
⁃	w[i]=g[i]-a[i];
⁃	                        t[i]=g[i+1]-a[i];
⁃	                        awt=awt+w[i];
⁃	                        att=att+t[i]; 
⁃	            }
⁃	     awt =awt/n;
⁃	            att=att/n;
⁃	            printf("\n\tprocess\twaiting time\tturn arround time\n");
⁃	            for(i=0;i<n;i++)
⁃	            {
⁃	                        printf("\tp%d\t\t%d\t\t%d\n",i,w[i],t[i]);
⁃	            }
⁃	printf("the average waiting time is %f\n",awt);
⁃	printf("the average turn around time is %f\n",att);
⁃	}

2)Write a C program to implement Shortest Job first (Non Preemptive)Scheduling Algorithm. (Consider all processes are arrived at time 0). 	
	
	Inputs: Number of processes, Burst Time of each process. 
	Outputs: Turnaround time and waiting time of each process. 

⁃	#include<stdio.h>
⁃	int main()
⁃	{
⁃	
⁃	int n,j,tmp,tmp1,tmp2,pr[10],bt[10],t[10],w[10],p[10],i;
⁃	
⁃	float x=0,y=0;
⁃	
⁃	for(i=0;i<10;i++)
⁃	            {
⁃	                        bt[i]=0;w[i]=0;
⁃	            }
⁃	
⁃	printf("enter the number of process");
⁃	scanf("%d",&n);
⁃	printf("enter the burst times");
⁃	
⁃	for(i=0;i<n;i++)
⁃	            {
⁃	                        scanf("%d",&bt[i]);
⁃	                        p[i]=i;
⁃	            }
⁃	for(i=0;i<n;i++)
⁃	            {
⁃	                        for(j=i;j<n;j++)
⁃	                        {
⁃	                                    if(bt[i]>bt[j])
⁃	                                    {
⁃	                                                tmp=bt[i];
⁃	                                                tmp1=p[i];
⁃	                                                bt[i]=bt[j];
⁃	                                                p[i]=p[j];
⁃	                                                bt[j]=tmp;
⁃	                                                p[j]=tmp1;
⁃	                                                }
⁃	}
⁃	}
⁃	w[0]=0;
⁃	for(i=0;i<n;i++)
⁃	w[i+1]=w[i]+bt[i];
⁃	for(i=0;i<n;i++)
⁃	        {
⁃	t[i]=w[i]+bt[i];
⁃	            y=y+w[i];
⁃	            x=x+t[i];
⁃	        }
⁃	y=y/n;
⁃	x=x/n;
⁃	printf("\n\t process \t waiting time \t turn around time \n");
⁃	for(i=0;i<n;i++)
⁃	printf("\t p[%d] \t %d \t\t %d \n",p[i],w[i],t[i]);
⁃	printf(" average waiting time is %f\n",y);
⁃	printf(" average turn around time is %f\n",x);
⁃	return 1;
⁃	}

3)	Write C Programs to implement Earliest Deadline First (EDF) scheduling algorithm of Real time operating system.  	
	
	Inputs:Number of processes,Release time, Deadline, Execution time of each process. 
	Outputs:Gantt chart showing execution of processes at various intervals  
	
⁃	#llistF.c
⁃	
⁃	#include "node.c"
⁃	#include<stdlib.h>
⁃	
⁃	#ifndef VST_NV_LIST
⁃	#define VST_NV_LIST
⁃	struct node* insert(struct node *list, struct node *predefin)
⁃	{
⁃	struct node *curr = NULL;
⁃	if(predefin == NULL)
⁃	{
⁃		if(list==NULL)
⁃		{
⁃			list=(struct node*)malloc(sizeof(struct node));
⁃			prnum;
⁃			getdata(list,NULL);
⁃		}
⁃		else
⁃		{
⁃			for(curr=list; curr -> next != NULL; curr = curr -> next);
⁃			curr -> next = (struct node*)malloc(sizeof(struct node));
⁃			curr = curr -> next;
⁃			getdata(curr,NULL);
⁃		}
⁃	}
⁃	
⁃	else
⁃	{
⁃		if(list==NULL)
⁃		{
⁃			list=(struct node*)malloc(sizeof(struct node));
⁃			*list = *predefin;
⁃			list -> next = NULL;
⁃		}
⁃		else
⁃		{
⁃			for(curr=list; curr -> next != NULL; curr = curr -> next);
⁃			curr -> next = (struct node*)malloc(sizeof(struct node));
⁃			curr = curr -> next;
⁃			*curr = *predefin;
⁃			curr -> next = NULL;
⁃		}
⁃	}
⁃	return list;
⁃	}
⁃	
⁃	int min_deadline_exec(struct node *start, int time)
⁃	{
⁃	int minValue = 0, prcsnum = 0;
⁃	struct node *list = start;
⁃	if(list == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		for(; list -> arrivalTime > time && list != NULL; list = list -> next);
⁃		minValue = list -> deadline;
⁃		prcsnum = list -> processNumber;
⁃		list = list -> next;
⁃	
⁃		while(list)
⁃		{
⁃			if(list -> deadline < minValue && list -> arrivalTime <= time)
⁃			{
⁃				minValue = list -> deadline;
⁃				prcsnum = list -> processNumber;
⁃			}
⁃			list = list -> next;
⁃		}
⁃	}
⁃	
⁃	for(list = start; list -> processNumber != prcsnum; list = list -> next);
⁃	list -> executionTime -= 1;
⁃	if(list -> executionTime == 0)
⁃	{
⁃		prcsnum *= -1;
⁃	}
⁃	return prcsnum;
⁃	}
⁃	
⁃	int min_slack_exec(struct node *start, int time)
⁃	{
⁃	int minValue = 0, prcsnum = 0;
⁃	struct node *list = start;
⁃	if(list == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		for(; list -> arrivalTime > time && list != NULL; list = list -> next);
⁃		minValue = time - list -> deadline - list -> executionTime;
⁃		prcsnum = list -> processNumber;
⁃		list = list -> next;
⁃	
⁃		while(list)
⁃		{
⁃			if(time - list -> deadline - list -> executionTime < minValue && list -> arrivalTime <= time)
⁃			{
⁃				minValue = time - list -> deadline - list -> executionTime;
⁃				prcsnum = list -> processNumber;
⁃			}
⁃			list = list -> next;
⁃		}
⁃	}
⁃	
⁃	for(list = start; list -> processNumber != prcsnum; list = list -> next);
⁃	list -> executionTime -= 1;
⁃	if(list -> executionTime == 0)
⁃	{
⁃		prcsnum *= -1;
⁃	}
⁃	return prcsnum;
⁃	}
⁃	
⁃	/*void displayLrow(struct node *start)
⁃	{
⁃	if(start == NULL)
⁃		printf("\nList is Empty...");
⁃	
⁃	else
⁃	{
⁃		while(start)
⁃		{
⁃			printf("\t");
⁃			showdata(start);
⁃			start = start->next;
⁃		}
⁃	}
⁃	}*/
⁃	
⁃	struct node* del(struct node *head, int iPrnum) //delets the node whose process number is matched
⁃	{
⁃	int iCnt, iPos;
⁃	struct node *prev = NULL; //maintaining pre
⁃	struct node *delnode = NULL;
⁃	struct node *curr = NULL;
⁃	
⁃	if(head == NULL)
⁃		printf("\n\nThe list is empty");
⁃		
⁃	else
⁃	{
⁃		//////////////////////////////////////////
⁃		curr = head;
⁃		prev = curr;
⁃		iCnt = 1;
⁃		while(curr->next != NULL && iPrnum != curr->processNumber)
⁃		{
⁃			prev = curr;
⁃			curr = curr->next;
⁃			iCnt++;
⁃		}
⁃		////////////////check for the match
⁃		
⁃		if(iCnt == 1 && iPrnum == curr->processNumber) //for deleting the first node
⁃		{
⁃			delnode = curr;
⁃			head = curr->next;
⁃			free(delnode);
⁃		}
⁃		else if(iPrnum == curr->processNumber) //for deleting any other node in between
⁃		{
⁃			delnode = curr;
⁃			prev->next = curr->next;
⁃			free(delnode);
⁃		}
⁃		
⁃		return head;
⁃	}
⁃	}
⁃	#endif
⁃	
⁃	#Node.c
⁃	
⁃	
⁃	#include<stdio.h>
⁃	#ifndef VST_NV_NODE
⁃	#define VST_NV_NODE
⁃	struct node
⁃	{
⁃	int processNumber, arrivalTime, deadline, executionTime;
⁃	struct node *next;
⁃	
⁃	};
⁃	int prnum = 1, totalTime = 0;
⁃	
⁃	inline void getdata(struct node *newobj, struct node *nextlink)
⁃	{
⁃	newobj->processNumber = prnum;
⁃	printf("\nEnter Arrival Time for Process %d:", prnum);
⁃	scanf("%d", &newobj->arrivalTime);
⁃	
⁃	printf("\nEnter Deadline for Process %d:", prnum);
⁃	scanf("%d", &newobj->deadline);
⁃	
⁃	printf("\nEnter Execution Time for Process %d:", prnum);
⁃	scanf("%d", &newobj->executionTime);
⁃	
⁃	newobj->next=nextlink;
⁃	prnum++;
⁃	totalTime += newobj->executionTime;
⁃	}
⁃	/*
⁃	inline void showdata(struct node *obj)
⁃	{
⁃	printf("%d",obj->val);
⁃	}
⁃	*/
⁃	#endif
⁃	
⁃	
⁃	#Queue.c
⁃	
⁃	#include "node.c"
⁃	
⁃	#ifndef VST_NV_QUEUE
⁃	#define VST_NV_QUEUE
⁃	struct Queue
⁃	{
⁃	int prnum;
⁃	struct node *top, *rear;
⁃	};
⁃	
⁃	void insert(struct Queue *que, struct node *predefin)
⁃	{
⁃	struct node *curr = NULL;
⁃	if(predefin == NULL)
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃		}
⁃	}
⁃	
⁃	else
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void del(struct Queue *que, struct node *deleted)
⁃	{
⁃	if(que -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *temp = que -> top;
⁃		que -> top = que -> top -> next;
⁃		temp -> next = NULL;
⁃		*deleted = *temp;
⁃		free(temp);
⁃	
⁃		if(que -> top == NULL)
⁃			que -> rear = NULL;
⁃	}
⁃	}
⁃	
⁃	/*void copy(struct Queue *que2, struct Queue *que1)
⁃	{
⁃	if(que1 -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que1 -> top;
⁃		while(list)
⁃		{
⁃			insert(que2,list);
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void displayq(struct Queue que)
⁃	{
⁃	if(que.top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que.top;
⁃		while(list)
⁃		{
⁃			showdata(list);
⁃			printf("\t");
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}*/
⁃	#endif
⁃	
⁃	#3_LST.c
⁃	
⁃	#include<stdio.h>
⁃	#include<stdlib.h>
⁃	#include"llistF.c"
⁃	
⁃	void main()
⁃	{
⁃	int n, i1, i2, time = 0, processToRun;
⁃	int *processRunOrder = NULL;
⁃	struct node *processes = NULL;
⁃	
⁃	printf("Enter total number of processes:");
⁃	scanf("%d",&n);
⁃	
⁃	    for(i1 = 0; i1 < n; i1++)
⁃	{
⁃	processes = insert(processes,NULL);
⁃	}
⁃	processRunOrder = (int*)malloc(totalTime*sizeof(int));
⁃	
⁃	while(processes != NULL)
⁃	{
⁃	processToRun = min_deadline_exec(processes, time);
⁃	if(processToRun < 0)
⁃	{
⁃		processToRun *= -1;
⁃		processes = del(processes, processToRun);
⁃	}
⁃	processRunOrder[time] = processToRun;
⁃	time++;
⁃	}
⁃	
⁃	for(i1 = 1; i1 <= n; i1++)
⁃	{
⁃	printf("\nP[%d]", i1);
⁃	for(i2 = 0; i2 < totalTime; i2++)
⁃	{
⁃		if(processRunOrder[i2] == i1)
⁃			printf("*");
⁃		else
⁃			printf(" ");
⁃	}
⁃	}
⁃	printf("\n");
⁃	free(processRunOrder);
⁃	}

4)Write C Programs to implement least slack time (LST) scheduling algorithm of Real time operating system.  
	
	Inputs:Number of processes,Release time, Deadline, Execution time of each process. 
	Outputs:Gantt chart showing execution of processes at various intervals  
	
⁃	#llistF.c
⁃	
⁃	#include "node.c"
⁃	#include<stdlib.h>
⁃	
⁃	#ifndef VST_NV_LIST
⁃	#define VST_NV_LIST
⁃	struct node* insert(struct node *list, struct node *predefin)
⁃	{
⁃	struct node *curr = NULL;
⁃	if(predefin == NULL)
⁃	{
⁃		if(list==NULL)
⁃		{
⁃			list=(struct node*)malloc(sizeof(struct node));
⁃			prnum;
⁃			getdata(list,NULL);
⁃		}
⁃		else
⁃		{
⁃			for(curr=list; curr -> next != NULL; curr = curr -> next);
⁃			curr -> next = (struct node*)malloc(sizeof(struct node));
⁃			curr = curr -> next;
⁃			getdata(curr,NULL);
⁃		}
⁃	}
⁃	
⁃	else
⁃	{
⁃		if(list==NULL)
⁃		{
⁃			list=(struct node*)malloc(sizeof(struct node));
⁃			*list = *predefin;
⁃			list -> next = NULL;
⁃		}
⁃		else
⁃		{
⁃			for(curr=list; curr -> next != NULL; curr = curr -> next);
⁃			curr -> next = (struct node*)malloc(sizeof(struct node));
⁃			curr = curr -> next;
⁃			*curr = *predefin;
⁃			curr -> next = NULL;
⁃		}
⁃	}
⁃	return list;
⁃	}
⁃	
⁃	int min_deadline_exec(struct node *start, int time)
⁃	{
⁃	int minValue = 0, prcsnum = 0;
⁃	struct node *list = start;
⁃	if(list == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		for(; list -> arrivalTime > time && list != NULL; list = list -> next);
⁃		minValue = list -> deadline;
⁃		prcsnum = list -> processNumber;
⁃		list = list -> next;
⁃	
⁃		while(list)
⁃		{
⁃			if(list -> deadline < minValue && list -> arrivalTime <= time)
⁃			{
⁃				minValue = list -> deadline;
⁃				prcsnum = list -> processNumber;
⁃			}
⁃			list = list -> next;
⁃		}
⁃	}
⁃	
⁃	for(list = start; list -> processNumber != prcsnum; list = list -> next);
⁃	list -> executionTime -= 1;
⁃	if(list -> executionTime == 0)
⁃	{
⁃		prcsnum *= -1;
⁃	}
⁃	return prcsnum;
⁃	}
⁃	
⁃	int min_slack_exec(struct node *start, int time)
⁃	{
⁃	int minValue = 0, prcsnum = 0;
⁃	struct node *list = start;
⁃	if(list == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		for(; list -> arrivalTime > time && list != NULL; list = list -> next);
⁃		minValue = time - list -> deadline - list -> executionTime;
⁃		prcsnum = list -> processNumber;
⁃		list = list -> next;
⁃	
⁃		while(list)
⁃		{
⁃			if(time - list -> deadline - list -> executionTime < minValue && list -> arrivalTime <= time)
⁃			{
⁃				minValue = time - list -> deadline - list -> executionTime;
⁃				prcsnum = list -> processNumber;
⁃			}
⁃			list = list -> next;
⁃		}
⁃	}
⁃	
⁃	for(list = start; list -> processNumber != prcsnum; list = list -> next);
⁃	list -> executionTime -= 1;
⁃	if(list -> executionTime == 0)
⁃	{
⁃		prcsnum *= -1;
⁃	}
⁃	return prcsnum;
⁃	}
⁃	
⁃	/*void displayLrow(struct node *start)
⁃	{
⁃	if(start == NULL)
⁃		printf("\nList is Empty...");
⁃	
⁃	else
⁃	{
⁃		while(start)
⁃		{
⁃			printf("\t");
⁃			showdata(start);
⁃			start = start->next;
⁃		}
⁃	}
⁃	}*/
⁃	
⁃	struct node* del(struct node *head, int iPrnum) //delets the node whose process number is matched
⁃	{
⁃	int iCnt, iPos;
⁃	struct node *prev = NULL; //maintaining pre
⁃	struct node *delnode = NULL;
⁃	struct node *curr = NULL;
⁃	
⁃	if(head == NULL)
⁃		printf("\n\nThe list is empty");
⁃		
⁃	else
⁃	{
⁃		//////////////////////////////////////////
⁃		curr = head;
⁃		prev = curr;
⁃		iCnt = 1;
⁃		while(curr->next != NULL && iPrnum != curr->processNumber)
⁃		{
⁃			prev = curr;
⁃			curr = curr->next;
⁃			iCnt++;
⁃		}
⁃		////////////////check for the match
⁃		
⁃		if(iCnt == 1 && iPrnum == curr->processNumber) //for deleting the first node
⁃		{
⁃			delnode = curr;
⁃			head = curr->next;
⁃			free(delnode);
⁃		}
⁃		else if(iPrnum == curr->processNumber) //for deleting any other node in between
⁃		{
⁃			delnode = curr;
⁃			prev->next = curr->next;
⁃			free(delnode);
⁃		}
⁃		
⁃		return head;
⁃	}
⁃	}
⁃	#endif
⁃	
⁃	#Node.c
⁃	
⁃	
⁃	#include<stdio.h>
⁃	#ifndef VST_NV_NODE
⁃	#define VST_NV_NODE
⁃	struct node
⁃	{
⁃	int processNumber, arrivalTime, deadline, executionTime;
⁃	struct node *next;
⁃	
⁃	};
⁃	int prnum = 1, totalTime = 0;
⁃	
⁃	inline void getdata(struct node *newobj, struct node *nextlink)
⁃	{
⁃	newobj->processNumber = prnum;
⁃	printf("\nEnter Arrival Time for Process %d:", prnum);
⁃	scanf("%d", &newobj->arrivalTime);
⁃	
⁃	printf("\nEnter Deadline for Process %d:", prnum);
⁃	scanf("%d", &newobj->deadline);
⁃	
⁃	printf("\nEnter Execution Time for Process %d:", prnum);
⁃	scanf("%d", &newobj->executionTime);
⁃	
⁃	newobj->next=nextlink;
⁃	prnum++;
⁃	totalTime += newobj->executionTime;
⁃	}
⁃	/*
⁃	inline void showdata(struct node *obj)
⁃	{
⁃	printf("%d",obj->val);
⁃	}
⁃	*/
⁃	#endif
⁃	
⁃	
⁃	#Queue.c
⁃	
⁃	#include "node.c"
⁃	
⁃	#ifndef VST_NV_QUEUE
⁃	#define VST_NV_QUEUE
⁃	struct Queue
⁃	{
⁃	int prnum;
⁃	struct node *top, *rear;
⁃	};
⁃	
⁃	void insert(struct Queue *que, struct node *predefin)
⁃	{
⁃	struct node *curr = NULL;
⁃	if(predefin == NULL)
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃		}
⁃	}
⁃	
⁃	else
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void del(struct Queue *que, struct node *deleted)
⁃	{
⁃	if(que -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *temp = que -> top;
⁃		que -> top = que -> top -> next;
⁃		temp -> next = NULL;
⁃		*deleted = *temp;
⁃		free(temp);
⁃	
⁃		if(que -> top == NULL)
⁃			que -> rear = NULL;
⁃	}
⁃	}
⁃	
⁃	/*void copy(struct Queue *que2, struct Queue *que1)
⁃	{
⁃	if(que1 -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que1 -> top;
⁃		while(list)
⁃		{
⁃			insert(que2,list);
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void displayq(struct Queue que)
⁃	{
⁃	if(que.top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que.top;
⁃		while(list)
⁃		{
⁃			showdata(list);
⁃			printf("\t");
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}*/
⁃	#endif
⁃	
⁃	
⁃	#4_LST.c
⁃	
⁃	#include "node.c"
⁃	
⁃	#ifndef VST_NV_QUEUE
⁃	#define VST_NV_QUEUE
⁃	struct Queue
⁃	{
⁃	int prnum;
⁃	struct node *top, *rear;
⁃	};
⁃	
⁃	void insert(struct Queue *que, struct node *predefin)
⁃	{
⁃	struct node *curr = NULL;
⁃	if(predefin == NULL)
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			getdata(que -> rear, NULL, que -> prnum);
⁃		}
⁃	}
⁃	
⁃	else
⁃	{
⁃		if(que -> rear == NULL)
⁃		{
⁃			que -> rear = (struct node*)malloc(sizeof(struct node));
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃			que -> top = que -> rear;
⁃		}
⁃		else
⁃		{
⁃			que -> rear -> next = (struct node*)malloc(sizeof(struct node));
⁃			que -> rear = que -> rear -> next;
⁃			*(que -> rear) = *predefin;
⁃			que -> rear -> next = NULL;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void del(struct Queue *que, struct node *deleted)
⁃	{
⁃	if(que -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *temp = que -> top;
⁃		que -> top = que -> top -> next;
⁃		temp -> next = NULL;
⁃		*deleted = *temp;
⁃		free(temp);
⁃	
⁃		if(que -> top == NULL)
⁃			que -> rear = NULL;
⁃	}
⁃	}
⁃	
⁃	/*void copy(struct Queue *que2, struct Queue *que1)
⁃	{
⁃	if(que1 -> top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que1 -> top;
⁃		while(list)
⁃		{
⁃			insert(que2,list);
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}
⁃	
⁃	void displayq(struct Queue que)
⁃	{
⁃	if(que.top == NULL)
⁃		printf("\nList is empty!!!");
⁃	
⁃	else
⁃	{
⁃		struct node *list = que.top;
⁃		while(list)
⁃		{
⁃			showdata(list);
⁃			printf("\t");
⁃			list = list -> next;
⁃		}
⁃	}
⁃	}*/
⁃	#endif
